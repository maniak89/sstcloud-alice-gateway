// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type linkTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *linkTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("links").
func (v *linkTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *linkTableType) Columns() []string {
	return []string{
		"id",
		"user_id",
		"sst_email",
		"sst_password",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *linkTableType) NewStruct() reform.Struct {
	return new(Link)
}

// NewRecord makes a new record for that table.
func (v *linkTableType) NewRecord() reform.Record {
	return new(Link)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *linkTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// LinkTable represents links view or table in SQL database.
var LinkTable = &linkTableType{
	s: parse.StructInfo{
		Type:    "Link",
		SQLName: "links",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "UserID", Type: "string", Column: "user_id"},
			{Name: "SSTEmail", Type: "string", Column: "sst_email"},
			{Name: "SSTPassword", Type: "string", Column: "sst_password"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(Link).Values(),
}

// String returns a string representation of this struct or record.
func (s Link) String() string {
	res := make([]string, 6)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "UserID: " + reform.Inspect(s.UserID, true)
	res[2] = "SSTEmail: " + reform.Inspect(s.SSTEmail, true)
	res[3] = "SSTPassword: " + reform.Inspect(s.SSTPassword, true)
	res[4] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[5] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Link) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.UserID,
		s.SSTEmail,
		s.SSTPassword,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Link) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.UserID,
		&s.SSTEmail,
		&s.SSTPassword,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Link) View() reform.View {
	return LinkTable
}

// Table returns Table object for that record.
func (s *Link) Table() reform.Table {
	return LinkTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Link) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Link) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Link) HasPK() bool {
	return s.ID != LinkTable.z[LinkTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Link) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = LinkTable
	_ reform.Struct = (*Link)(nil)
	_ reform.Table  = LinkTable
	_ reform.Record = (*Link)(nil)
	_ fmt.Stringer  = (*Link)(nil)
)

type logTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *logTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("logs").
func (v *logTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *logTableType) Columns() []string {
	return []string{
		"id",
		"link_id",
		"time",
		"level",
		"message",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *logTableType) NewStruct() reform.Struct {
	return new(Log)
}

// NewRecord makes a new record for that table.
func (v *logTableType) NewRecord() reform.Record {
	return new(Log)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *logTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// LogTable represents logs view or table in SQL database.
var LogTable = &logTableType{
	s: parse.StructInfo{
		Type:    "Log",
		SQLName: "logs",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "LinkID", Type: "string", Column: "link_id"},
			{Name: "Time", Type: "time.Time", Column: "time"},
			{Name: "Level", Type: "LogLevel", Column: "level"},
			{Name: "Message", Type: "string", Column: "message"},
		},
		PKFieldIndex: 0,
	},
	z: new(Log).Values(),
}

// String returns a string representation of this struct or record.
func (s Log) String() string {
	res := make([]string, 5)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "LinkID: " + reform.Inspect(s.LinkID, true)
	res[2] = "Time: " + reform.Inspect(s.Time, true)
	res[3] = "Level: " + reform.Inspect(s.Level, true)
	res[4] = "Message: " + reform.Inspect(s.Message, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Log) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.LinkID,
		s.Time,
		s.Level,
		s.Message,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Log) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.LinkID,
		&s.Time,
		&s.Level,
		&s.Message,
	}
}

// View returns View object for that struct.
func (s *Log) View() reform.View {
	return LogTable
}

// Table returns Table object for that record.
func (s *Log) Table() reform.Table {
	return LogTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Log) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Log) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Log) HasPK() bool {
	return s.ID != LogTable.z[LogTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Log) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = LogTable
	_ reform.Struct = (*Log)(nil)
	_ reform.Table  = LogTable
	_ reform.Record = (*Log)(nil)
	_ fmt.Stringer  = (*Log)(nil)
)

func init() {
	parse.AssertUpToDate(&LinkTable.s, new(Link))
	parse.AssertUpToDate(&LogTable.s, new(Log))
}
